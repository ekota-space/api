//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ProjectTeams = newProjectTeamsTable("public", "project_teams", "")

type projectTeamsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	ProjectID postgres.ColumnString
	TeamID    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProjectTeamsTable struct {
	projectTeamsTable

	EXCLUDED projectTeamsTable
}

// AS creates new ProjectTeamsTable with assigned alias
func (a ProjectTeamsTable) AS(alias string) *ProjectTeamsTable {
	return newProjectTeamsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProjectTeamsTable with assigned schema name
func (a ProjectTeamsTable) FromSchema(schemaName string) *ProjectTeamsTable {
	return newProjectTeamsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProjectTeamsTable with assigned table prefix
func (a ProjectTeamsTable) WithPrefix(prefix string) *ProjectTeamsTable {
	return newProjectTeamsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProjectTeamsTable with assigned table suffix
func (a ProjectTeamsTable) WithSuffix(suffix string) *ProjectTeamsTable {
	return newProjectTeamsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProjectTeamsTable(schemaName, tableName, alias string) *ProjectTeamsTable {
	return &ProjectTeamsTable{
		projectTeamsTable: newProjectTeamsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newProjectTeamsTableImpl("", "excluded", ""),
	}
}

func newProjectTeamsTableImpl(schemaName, tableName, alias string) projectTeamsTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		ProjectIDColumn = postgres.StringColumn("project_id")
		TeamIDColumn    = postgres.StringColumn("team_id")
		allColumns      = postgres.ColumnList{IDColumn, CreatedAtColumn, ProjectIDColumn, TeamIDColumn}
		mutableColumns  = postgres.ColumnList{CreatedAtColumn, ProjectIDColumn, TeamIDColumn}
	)

	return projectTeamsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		ProjectID: ProjectIDColumn,
		TeamID:    TeamIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
