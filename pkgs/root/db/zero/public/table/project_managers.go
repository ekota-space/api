//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ProjectManagers = newProjectManagersTable("public", "project_managers", "")

type projectManagersTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	ProjectID postgres.ColumnString
	UserID    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProjectManagersTable struct {
	projectManagersTable

	EXCLUDED projectManagersTable
}

// AS creates new ProjectManagersTable with assigned alias
func (a ProjectManagersTable) AS(alias string) *ProjectManagersTable {
	return newProjectManagersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProjectManagersTable with assigned schema name
func (a ProjectManagersTable) FromSchema(schemaName string) *ProjectManagersTable {
	return newProjectManagersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProjectManagersTable with assigned table prefix
func (a ProjectManagersTable) WithPrefix(prefix string) *ProjectManagersTable {
	return newProjectManagersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProjectManagersTable with assigned table suffix
func (a ProjectManagersTable) WithSuffix(suffix string) *ProjectManagersTable {
	return newProjectManagersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProjectManagersTable(schemaName, tableName, alias string) *ProjectManagersTable {
	return &ProjectManagersTable{
		projectManagersTable: newProjectManagersTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newProjectManagersTableImpl("", "excluded", ""),
	}
}

func newProjectManagersTableImpl(schemaName, tableName, alias string) projectManagersTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		ProjectIDColumn = postgres.StringColumn("project_id")
		UserIDColumn    = postgres.StringColumn("user_id")
		allColumns      = postgres.ColumnList{IDColumn, CreatedAtColumn, ProjectIDColumn, UserIDColumn}
		mutableColumns  = postgres.ColumnList{CreatedAtColumn, ProjectIDColumn, UserIDColumn}
	)

	return projectManagersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		ProjectID: ProjectIDColumn,
		UserID:    UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
