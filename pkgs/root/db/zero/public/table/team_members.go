//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TeamMembers = newTeamMembersTable("public", "team_members", "")

type teamMembersTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	TeamID    postgres.ColumnString
	UserID    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TeamMembersTable struct {
	teamMembersTable

	EXCLUDED teamMembersTable
}

// AS creates new TeamMembersTable with assigned alias
func (a TeamMembersTable) AS(alias string) *TeamMembersTable {
	return newTeamMembersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TeamMembersTable with assigned schema name
func (a TeamMembersTable) FromSchema(schemaName string) *TeamMembersTable {
	return newTeamMembersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TeamMembersTable with assigned table prefix
func (a TeamMembersTable) WithPrefix(prefix string) *TeamMembersTable {
	return newTeamMembersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TeamMembersTable with assigned table suffix
func (a TeamMembersTable) WithSuffix(suffix string) *TeamMembersTable {
	return newTeamMembersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTeamMembersTable(schemaName, tableName, alias string) *TeamMembersTable {
	return &TeamMembersTable{
		teamMembersTable: newTeamMembersTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newTeamMembersTableImpl("", "excluded", ""),
	}
}

func newTeamMembersTableImpl(schemaName, tableName, alias string) teamMembersTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		TeamIDColumn    = postgres.StringColumn("team_id")
		UserIDColumn    = postgres.StringColumn("user_id")
		allColumns      = postgres.ColumnList{IDColumn, CreatedAtColumn, TeamIDColumn, UserIDColumn}
		mutableColumns  = postgres.ColumnList{CreatedAtColumn, TeamIDColumn, UserIDColumn}
	)

	return teamMembersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		TeamID:    TeamIDColumn,
		UserID:    UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
